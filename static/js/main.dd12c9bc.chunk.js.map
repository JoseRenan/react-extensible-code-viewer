{"version":3,"sources":["../../src/index.tsx","App.js","index.js"],"names":["Highlighter","language","children","preRef","useRef","useEffect","hljs","ref","className","styles","code","CodeLine","lineNumber","line","CodeViewer","endLineChar","React","lines","key","index","lineContainer","AddCommentButton","onClick","CommentInput","style","width","useState","showAddComment","setShowAddComment","showCommentInput","setShowCommentInput","Fragment","display","onMouseEnter","onMouseLeave","App","props","ReactDOM","render","document","getElementById"],"mappings":"uWAqBaA,EAAc,SAAC,G,IAAEC,aAAUC,aAChCC,EAASC,iBAAf,MAMA,OALAC,qBAAU,WACJF,GAAUA,EAAd,SACEG,mBAAoBH,EAApBG,WAED,CAJHD,IAME,yBAAKE,IAAKJ,EAAQK,UAAcC,EAAL,QAAmBR,GAC5C,0BAAMO,UAAWC,EAAOC,MAF5B,KAOWC,EAAW,SAAC,G,IACvBC,eACAV,aAKA,OACE,0BAAMM,UAAS,GAAKC,EAAOI,MACzB,0BAAML,UAAS,GAAKC,EAAOG,YAA3B,EADF,KADF,IAQWE,EAAa,SAAC,G,IACzBJ,S,IACAK,uBAAcA,EAAA,OACdd,a,IACAY,gBAAOA,EAAA,mBAAWG,qCAAX,OAEDC,EAAQP,QAAd,GACA,OACE,yBAAKF,UAAcC,EAAL,mBACXQ,EAAA,KAAU,qBACT,0BAAMC,IAAKC,EAAOX,UAAWC,EAAOW,eACjCP,EAAK,CACJD,WAAYO,EADR,EAEJT,KAFI,EAGJR,SAAU,qBAAaD,SAAUA,GAAvB,WC3DhBS,G,OAAI,wRAeJW,EAAmB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACvB,yBAAKd,UAAU,cAAcc,QAASA,GAAtC,MAKIC,EAAe,kBACnB,yBAAKf,UAAU,iBACb,8BAAUgB,MAAO,CAAEC,MAAO,UAC1B,6BACE,0CACA,8CAKAd,EAAW,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,WAAYV,EAAe,EAAfA,SAAe,EACDwB,oBAAS,GADR,mBACtCC,EADsC,KACtBC,EADsB,OAEGF,oBAAS,GAFZ,mBAEtCG,EAFsC,KAEpBC,EAFoB,KAG7C,OACE,kBAAC,IAAMC,SAAP,KACE,0BACEP,MAAO,CAAEQ,QAAS,QAClBC,aAAc,kBAAML,GAAkB,IACtCM,aAAc,kBAAMN,GAAkB,KAEtC,0BAAMpB,UAAU,eAAeI,EAA/B,KACA,0BAAMY,MAAO,CAAEC,MAAO,SACnBE,EACC,kBAAC,EAAD,CACEL,QAAS,kBAAMQ,GAAqBD,MAEpC,MAEL3B,GAEF2B,EAAmB,kBAAC,EAAD,MAAmB,OA2F9BM,EAtFH,WACV,OACE,oCACE,oEACA,uCACA,kBAAC,EAAD,CAAYzB,KAAMA,EAAMT,SAAS,SACjC,qCACA,kBAAC,EAAD,CACES,KAAI,kOAKJT,SAAS,eAGX,0GAIA,uCACA,kBAAC,EAAD,CACES,KAAMA,EACNT,SAAS,OACTY,KAAM,SAACuB,GAAD,OAAW,kBAAC,EAAaA,MAEjC,qCACA,kBAAC,EAAD,CACE1B,KAAI,m4CAoDJT,SAAS,UCvIjBoC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.dd12c9bc.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport hljs from 'highlight.js'\nimport 'highlight.js/styles/github-gist.css'\nimport styles from './styles.module.css'\n\nexport interface HighlighterProps {\n  children: string\n  language?: string\n}\n\nexport interface Props {\n  code: string\n  language?: string\n  endLineChar?: string\n  line: (lineProps: {\n    lineNumber: number\n    code: string\n    children: React.ReactNode\n  }) => React.ReactNode\n}\n\nexport const Highlighter = ({ language, children }: HighlighterProps) => {\n  const preRef = useRef<HTMLPreElement>(null)\n  useEffect(() => {\n    if (preRef && preRef.current) {\n      hljs.highlightBlock(preRef.current)\n    }\n  }, [preRef])\n  return (\n    <pre ref={preRef} className={`${styles.pre} ${language}`}>\n      <code className={styles.code}>{children}</code>\n    </pre>\n  )\n}\n\nexport const CodeLine = ({\n  lineNumber,\n  children\n}: {\n  lineNumber: number\n  children: React.ReactNode\n}) => {\n  return (\n    <span className={`${styles.line}`}>\n      <span className={`${styles.lineNumber}`}>{lineNumber}.</span>\n      {children}\n    </span>\n  )\n}\n\nexport const CodeViewer = ({\n  code,\n  endLineChar = '\\n',\n  language,\n  line = (props) => <CodeLine {...props} />\n}: Props) => {\n  const lines = code.split(endLineChar)\n  return (\n    <div className={`${styles.container} hljs`}>\n      {lines.map((code, index) => (\n        <span key={index} className={styles.lineContainer}>\n          {line({\n            lineNumber: index + 1,\n            code,\n            children: <Highlighter language={language}>{code}</Highlighter>\n          })}\n        </span>\n      ))}\n    </div>\n  )\n}\n","import React, { useState } from 'react'\n\nimport { CodeViewer } from 'react-extensible-code-viewer'\nimport 'react-extensible-code-viewer/dist/index.css'\n\nconst code = `public class Main {\n  private int c = 5;\n\n  public static void main(String args[]) {\n    int a = 1;\n    int b = 2;\n    System.out.println(a + b + c + 1);\n    Main.sayHello()\n  }\n\n  public static void sayHello() {\n    System.out.println(\"Hello ðŸ¥º\")\n  }\n}`\n\nconst AddCommentButton = ({ onClick }) => (\n  <div className='add-comment' onClick={onClick}>\n    +\n  </div>\n)\n\nconst CommentInput = () => (\n  <div className='comment-input'>\n    <textarea style={{ width: '100%' }} />\n    <div>\n      <button>Cancel</button>\n      <button>Comment</button>\n    </div>\n  </div>\n)\n\nconst CodeLine = ({ lineNumber, children }) => {\n  const [showAddComment, setShowAddComment] = useState(false)\n  const [showCommentInput, setShowCommentInput] = useState(false)\n  return (\n    <React.Fragment>\n      <span\n        style={{ display: 'flex' }}\n        onMouseEnter={() => setShowAddComment(true)}\n        onMouseLeave={() => setShowAddComment(false)}\n      >\n        <span className='line-number'>{lineNumber}.</span>\n        <span style={{ width: '1rem' }}>\n          {showAddComment ? (\n            <AddCommentButton\n              onClick={() => setShowCommentInput(!showCommentInput)}\n            />\n          ) : null}\n        </span>\n        {children}\n      </span>\n      {showCommentInput ? <CommentInput /> : null}\n    </React.Fragment>\n  )\n}\n\nconst App = () => {\n  return (\n    <>\n      <h1>React Extensible Code Viewer Example</h1>\n      <h3>Result:</h3>\n      <CodeViewer code={code} language='java' />\n      <h3>Code:</h3>\n      <CodeViewer\n        code={`import React, { useState } from 'react'\nimport { CodeViewer } from 'react-extensible-code-viewer'\nimport 'react-extensible-code-viewer/dist/index.css'\n\nexport const App = () => <CodeViewer code={code} language='java' />`}\n        language='javascript'\n      />\n\n      <h1>\n        Custom example with review comments (hover a code line and click on the\n        +)\n      </h1>\n      <h3>Result:</h3>\n      <CodeViewer\n        code={code}\n        language='java'\n        line={(props) => <CodeLine {...props} />}\n      />\n      <h3>Code:</h3>\n      <CodeViewer\n        code={`import React, { useState } from 'react'\nimport { CodeViewer } from 'react-extensible-code-viewer'\nimport 'react-extensible-code-viewer/dist/index.css'\n\nconst AddCommentButton = ({ onClick }) => (\n  <div className='add-comment' onClick={onClick}>\n    +\n  </div>\n)\n\nconst CommentInput = () => (\n  <div className='comment-input'>\n    <textarea style={{ width: '100%' }} />\n    <div>\n      <button>Cancel</button>\n      <button>Comment</button>\n    </div>\n  </div>\n)\n\nconst CodeLine = ({ lineNumber, children }) => {\n  const [showAddComment, setShowAddComment] = useState(false)\n  const [showCommentInput, setShowCommentInput] = useState(false)\n  return (\n    <React.Fragment>\n      <span\n        style={{ display: 'flex' }}\n        onMouseEnter={() => setShowAddComment(true)}\n        onMouseLeave={() => setShowAddComment(false)}\n      >\n        <span className='line-number'>{lineNumber}.</span>\n        <span style={{ width: '1rem' }}>\n          {showAddComment ? (\n            <AddCommentButton\n              onClick={() => setShowCommentInput(!showCommentInput)}\n            />\n          ) : null}\n        </span>\n        {children}\n      </span>\n      {showCommentInput ? <CommentInput /> : null}\n    </React.Fragment>\n  )\n}\n\nexport const App = () => (\n  <CodeViewer\n    code={code}\n    language='java'\n    line={(props) => <CodeLine {...props}/>}\n  />\n)`}\n        language='jsx'\n      />\n    </>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}